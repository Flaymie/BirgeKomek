require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const axios = require('axios');

const BOT_TOKEN = process.env.BOT_TOKEN;
const API_URL = process.env.API_URL;
const FRONTEND_URL = process.env.FRONTEND_URL;

if (!BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.');
  process.exit(1);
}

// --- –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
function createSubjectsKeyboard(selectedSubjects = []) {
    const getButton = (value, label) => {
        const isSelected = selectedSubjects.includes(value);
        const text = `${isSelected ? '‚úÖ ' : ''}${label}`;
        return Markup.button.callback(text, `subject_${value}`);
    };

    return Markup.inlineKeyboard([
        [getButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'), getButton('–§–∏–∑–∏–∫–∞', '–§–∏–∑–∏–∫–∞')],
        [getButton('–•–∏–º–∏—è', '–•–∏–º–∏—è'), getButton('–ë–∏–æ–ª–æ–≥–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è')],
        [getButton('–ò—Å—Ç–æ—Ä–∏—è', '–ò—Å—Ç–æ—Ä–∏—è'), getButton('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è')],
        [getButton('–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'), getButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫')],
        [getButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'), getButton('–î—Ä—É–≥–æ–µ', '–î—Ä—É–≥–æ–µ')],
        [Markup.button.callback('üöÄ –ì–æ—Ç–æ–≤–æ', 'subjects_done')]
    ]);
}

// --- –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---

const registrationScene = new Scenes.WizardScene(
  'registration',
  // Step 1: Ask for role
  (ctx) => {
    ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ?',
      Markup.inlineKeyboard([
        Markup.button.callback('–Ø –£—á–µ–Ω–∏–∫', 'role_student'),
        Markup.button.callback('–Ø –•–µ–ª–ø–µ—Ä', 'role_helper'),
      ])
    );
    ctx.wizard.state.data = {};
    return ctx.wizard.next();
  },
  // Step 2: Ask for grade
  (ctx) => {
    if (!ctx.callbackQuery?.data.startsWith('role_')) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ.');
        return;
    }
    const role = ctx.callbackQuery.data.split('_')[1];
    ctx.wizard.state.data.role = role;

    ctx.reply(
        '–ü—Ä–∏–Ω—è—Ç–æ. –í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—å? (–¥–ª—è —Ö–µ–ª–ø–µ—Ä–æ–≤ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–±–∏—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã)',
        Markup.keyboard([
            ['7', '8', '9'],
            ['10', '11']
        ]).resize().oneTime()
    );
    return ctx.wizard.next();
  },
  // Step 3: Ask for subjects (for helpers) or finalize
  (ctx) => {
    const grade = parseInt(ctx.message?.text, 10);
    if (isNaN(grade) || grade < 7 || grade > 11) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç 7 –¥–æ 11, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.');
        return;
    }
    ctx.wizard.state.data.grade = grade;

    if (ctx.wizard.state.data.role === 'helper') {
        ctx.wizard.state.data.subjects = [];
        ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ–≥–∞—Ç—å. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.',
            createSubjectsKeyboard([])
        );
        return ctx.wizard.next();
    }
    
    // –°—Ç—É–¥–µ–Ω—Ç—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞
    ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.', 
      Markup.keyboard([
        Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º')
      ]).resize().oneTime()
    );
    // –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —ç—Ç–æ –±—É–¥–µ—Ç —à–∞–≥ 4, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ 3 (–≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
    return ctx.wizard.selectStep(ctx.wizard.cursor + 2);
  },
  // Step 4 (–¥–ª—è —Ö–µ–ª–ø–µ—Ä–æ–≤): –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  async (ctx) => {
     if (ctx.callbackQuery?.data.startsWith('subject_')) {
        const subject = ctx.callbackQuery.data.split('_')[1];
        const subjects = ctx.wizard.state.data.subjects;

        if (subjects.includes(subject)) {
            ctx.wizard.state.data.subjects = subjects.filter(s => s !== subject);
        } else {
            ctx.wizard.state.data.subjects.push(subject);
        }
        
        const updatedKeyboard = createSubjectsKeyboard(ctx.wizard.state.data.subjects);
        await ctx.editMessageReplyMarkup(updatedKeyboard.reply_markup);
        await ctx.answerCbQuery();
        return;
     }

     if (ctx.callbackQuery?.data === 'subjects_done') {
        if (ctx.wizard.state.data.subjects.length === 0) {
            await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!', { show_alert: true });
            return;
        }
        await ctx.editMessageText('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.');
        await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', Markup.keyboard([
            Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º')
        ]).resize().oneTime());
        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
     }
     // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–æ, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–ª–∏
     ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.');
  },
  // Step 5 (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π): –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  (ctx) => {
    if (!ctx.message?.contact?.phone_number) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º.');
        return;
    }
    ctx.wizard.state.data.phone = ctx.message.contact.phone_number;
    ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞...', Markup.removeKeyboard());
    return registerUser(ctx);
  }
);

// --- Bot Setup ---
const bot = new Telegraf(BOT_TOKEN);
const stage = new Scenes.Stage([registrationScene]);

bot.use(session());
bot.use(stage.middleware());

bot.start(async (ctx) => {
  const payload = ctx.startPayload;

  if (!payload) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞—à–µ–ª –±–æ—Ç–∞ –∏ –Ω–∞–∂–∞–ª /start
    const text = 
      `üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç *Birge K√∂mek* ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤.\n\n` +
      `üõë –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏:\n` +
      `üëâ *"–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"* –∏–ª–∏ *"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram"*\n\n` +
      `–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –≤—Å—ë –ø–æ–π–º—ë—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞ üòä`;

    const options = {
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    };

    // Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localhost –≤ –∫–Ω–æ–ø–∫–∞—Ö.
    // –ü–æ—ç—Ç–æ–º—É –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ –∫–Ω–æ–ø–∫–æ–π.
    if (process.env.FRONTEND_URL && process.env.FRONTEND_URL.includes('localhost')) {
      return ctx.reply(`${text}\n\nüîó *–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:* ${process.env.FRONTEND_URL}`, options);
    }

    return ctx.reply(text, {
      ...options,
      ...Markup.inlineKeyboard([
        Markup.button.url('üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', process.env.FRONTEND_URL)
      ])
    });
  }

  // --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª —Å —Å–∞–π—Ç–∞ —Å payload'–æ–º ---

  const [action, token] = payload.split('_');

  if (action === 'register') {
    try {
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–û–£–¢
      const response = await axios.get(`${API_URL}/api/users/by-telegram/${ctx.from.id}`);
      if (response.data.exists) {
        return ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".');
      }
      // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Å—Ü–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ctx.scene.enter('registration', { loginToken: token });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.response?.data || error.message);
      return ctx.reply('–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return;
  }

  if (action === 'login') {
    if (!token) {
      return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å —Å–∞–π—Ç–∞.');
    }
    try {
      // –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–≤—è–∂–µ—Ç —Å–µ—Å—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ (–ø–æ —Ç–æ–∫–µ–Ω—É) —Å telegramId
      await axios.post(`${API_URL}/api/auth/telegram/complete-login`, { 
        telegramId: ctx.from.id,
        loginToken: token 
      });
      await ctx.reply('‚úÖ –í—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç, —Å–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Ö–æ–¥–∞:", error.response?.data || error.message);
      await ctx.reply('–£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å —Å–∞–π—Ç–∞.');
    }
    return;
  }

  if (action === 'link') {
    if (!token) {
        return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è.');
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
    ctx.session.linkData = {
        linkToken: payload, // payload —ç—Ç–æ "link_..."
        telegramId: ctx.from.id,
        telegramUsername: ctx.from.username
    };
    return ctx.reply('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.', 
        Markup.keyboard([
            Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏')
        ]).resize().oneTime()
    );
  }
  
  return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.');
});

// –ö–æ–º–∞–Ω–¥–∞ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot.command('settings', async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–û–£–¢
    const response = await axios.get(`${API_URL}/api/users/by-telegram/${telegramId}/settings`);
    const { telegramNotificationsEnabled } = response.data;

    const statusText = telegramNotificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã';
    const buttonText = telegramNotificationsEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å';
    const buttonEmoji = telegramNotificationsEnabled ? 'üî¥' : 'üü¢';

    await ctx.reply(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:\n\n*–°—Ç–∞—Ç—É—Å:* ${statusText}`, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: `${buttonEmoji} ${buttonText}`, callback_data: 'toggle_notifications' }
        ]]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.response?.data || error.message);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data === 'toggle_notifications') {
        try {
            const telegramId = ctx.from.id;
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–û–£–¢
            const response = await axios.post(`${API_URL}/api/users/by-telegram/${telegramId}/toggle-notifications`);
            const { telegramNotificationsEnabled } = response.data;
            
            const statusText = telegramNotificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã';
            const buttonText = telegramNotificationsEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å';
            const buttonEmoji = telegramNotificationsEnabled ? 'üî¥' : 'üü¢';

            await ctx.editMessageText(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:\n\n*–°—Ç–∞—Ç—É—Å:* ${statusText}`, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [[
                  { text: `${buttonEmoji} ${buttonText}`, callback_data: 'toggle_notifications' }
                ]]
              }
            });
            await ctx.answerCbQuery(telegramNotificationsEnabled ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.response?.data || error.message);
            await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
        }
    }
});

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ù–¢–ê–ö–¢–ê –î–õ–Ø –ü–†–ò–í–Ø–ó–ö–ò ---
bot.on('contact', async (ctx) => {
    const { linkData } = ctx.session;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—è–∑–∫–∏
    if (linkData && linkData.linkToken) {
        const phone = ctx.message.contact.phone_number;
        
        try {
            await axios.post(`${API_URL}/api/auth/finalizelink`, {
                ...linkData,
                phone: phone
            });
            await ctx.reply('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–∞ —Å–∞–π—Ç–µ.', Markup.removeKeyboard());
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞:", error.response?.data || error.message);
            const errorMessage = error.response?.data?.msg || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`, Markup.removeKeyboard());
        } finally {
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            ctx.session.linkData = null;
        }
    } else {
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏—à–µ–ª –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
        ctx.reply('–°–ø–∞—Å–∏–±–æ, –Ω–æ —Å–µ–π—á–∞—Å –º–Ω–µ –Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä. üòä');
    }
});

async function registerUser(ctx) {
  try {
    const { role, grade, subjects, phone } = ctx.wizard.state.data;
    const { id: telegramId, username } = ctx.from;
    const { loginToken } = ctx.scene.state; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    const existingUserResponse = await axios.get(`${API_URL}/api/users/by-telegram/${telegramId}`);
    if (existingUserResponse.data.exists) {
      ctx.reply('–ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
      // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ–≥–∏–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
      if(loginToken) {
         await axios.post(`${API_URL}/api/auth/telegram/complete-login`, { 
            telegramId: telegramId,
            loginToken: loginToken
         });
      }
      return ctx.scene.leave();
    }
    
    // 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    const userData = {
      role,
      grade,
      subjects,
      phone,
      telegramId,
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–Ω–∏–∫–∞ –∏–ª–∏ ID
      username: username || `user${telegramId}`,
      loginToken // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥
    };

    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–û–£–¢
    const response = await axios.post(`${API_URL}/api/auth/telegram/register`, userData, {
      headers: { 'X-Bot-Internal-Secret': process.env.BOT_INTERNAL_SECRET }
    });

    if (response.status === 201 || response.status === 200) {
      await ctx.reply('–°—É–ø–µ—Ä! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.');
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ
      if (loginToken) {
          await axios.post(`${API_URL}/api/auth/telegram/complete-login`, { 
              telegramId,
              loginToken
          });
          await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç, –≤—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
      }
    }
    
    return ctx.scene.leave();
  } catch (error) {
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.';
    if (error.response) {
      // error.response.data.msg - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ")
      errorMessage = error.response.data.msg || errorMessage;
    }
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.response?.data || error.message);
    await ctx.reply(`–û—à–∏–±–∫–∞: ${errorMessage} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`);
    return ctx.scene.leave();
  }
}

bot.launch().then(() => {
    console.log('–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 