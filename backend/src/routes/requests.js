import express from 'express';
import { body, validationResult, param, query } from 'express-validator';
import Request from '../models/Request.js';
import User from '../models/User.js'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ User –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
import Message from '../models/Message.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Message
import { protect, isHelper, isAdmin, isModOrAdmin } from '../middleware/auth.js';
import { createAndSendNotification } from './notifications.js'; // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
import mongoose from 'mongoose';
import { createRequestLimiter, generalLimiter } from '../middleware/rateLimiters.js'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
import { uploadAttachments } from './upload.js';
import tgRequired from '../middleware/tgRequired.js';
import redis from '../config/redis.js'; 
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';
import { sendTelegramMessage } from './users.js';
import geminiService from "../services/geminiService.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å

// --->>> –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ü–û–í–ï–©–ï–ù–ò–Ø –•–ï–õ–ü–ï–†–û–í <<<---
const notifyHelpersAboutNewRequest = async (request, author) => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–≤—Ç–æ—Ä –Ω–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–µ–π –∂–µ –∑–∞—è–≤–∫–µ
    if (!request || !author || request.status === 'draft') {
        return;
    }

    try {
        const { subject, grade, title, _id } = request;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ö–µ–ª–ø–µ—Ä–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É, –∏ –∏—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞
        const helpersForSubject = await User.find({
            'roles.helper': true,
            subjects: subject,
            _id: { $ne: author._id }
        });

        if (helpersForSubject.length === 0) {
            return; // –ù–µ–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å
        }

        const helperIds = helpersForSubject.map(h => h._id);

        // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ
        const notificationPromises = helperIds.map(helperId => {
            return createAndSendNotification({
                user: helperId,
                type: 'new_request_for_subject',
                title: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É: ${subject}`,
                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${author.username} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –∑–∞—è–≤–∫—É \"${title}\" –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ${subject} –¥–ª—è ${grade} –∫–ª–∞—Å—Å–∞.`,
                link: `/requests/${_id}`
            });
        });
        await Promise.all(notificationPromises);

        // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        const tgUsers = helpersForSubject.filter(h =>
            h.telegramIntegration && h.telegramIntegration.notificationsEnabled && h.telegramId
        );

        for (const tgUser of tgUsers) {
            const messageText = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É!* üîî\n\n*–¢–µ–º–∞:* ${title}\n*–ü—Ä–µ–¥–º–µ—Ç:* ${subject}, ${grade} –∫–ª–∞—Å—Å\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ.`;
            await sendTelegramMessage(tgUser.telegramId, messageText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", url: `${process.env.FRONTEND_URL}/requests/${_id}` }]
                    ]
                }
            });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–∏ —Ö–µ–ª–ø–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ:", error);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    }
};

// Middleware –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
const decodeFileNames = (req, res, next) => {
  if (req.files && req.files.length > 0) {
    req.files.forEach(file => {
      file.originalname = Buffer.from(file.originalname, 'latin1').toString('utf8');
    });
  }
  next();
};

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ, –ß–¢–û–ë–´ –ü–†–ò–ù–Ø–¢–¨ io –ò –ò–ù–ö–ê–ü–°–£–õ–ò–†–û–í–ê–¢–¨ –í–°–Æ –õ–û–ì–ò–ö–£
export default ({ io }) => {
  const router = express.Router(); // –°–û–ó–î–ê–ï–ú –†–û–£–¢–ï–† –í–ù–£–¢–†–ò

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç–µ—Ä –∫–æ –≤—Å–µ–º —Ä–æ—É—Ç–∞–º –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ü–û–°–õ–ï —ç—Ç–æ–≥–æ –º–∏–¥–ª–≤–∞—Ä—è
  // –∏ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç.–∫. `generalLimiter` –∑–∞–≤–∏—Å–∏—Ç –æ—Ç `req.user`)
  router.use(protect, generalLimiter);

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ
  const checkEditDeletePermission = async (req, res, next) => {
    try {
        const request = await Request.findById(req.params.id).populate('author', 'username _id');
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = req.user; 
        const isAuthor = request.author._id.toString() === user.id;
        const isPrivileged = user.roles.admin || user.roles.moderator;
        
        if (!isAuthor && !isPrivileged) {
            return res.status(403).json({ msg: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' });
        }
        
        req.request = request; // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
        req.isPrivilegedUser = isPrivileged; // –§–ª–∞–≥, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞
        req.isModeratorAction = isPrivileged && !isAuthor; // –§–ª–∞–≥, —á—Ç–æ –º–æ–¥–µ—Ä/–∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞–¥ —á—É–∂–æ–π –∑–∞—è–≤–∫–æ–π
        next();
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤');
    }
  };

/**
 * @swagger
 * /api/requests:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema: { type: 'integer', default: 1 }
 *         description: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 *       - in: query
 *         name: limit
 *         schema: { type: 'integer', default: 10 }
 *         description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 *       - in: query
 *         name: subjects
 *         schema: { type: 'string' }
 *         description: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞,–§–∏–∑–∏–∫–∞")
 *       - in: query
 *         name: grade
 *         schema: { type: 'integer' }
 *         description: –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
 *       - in: query
 *         name: status
 *         schema: { type: 'string', enum: ['open', 'assigned', 'completed', 'cancelled'] }
 *         description: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'open', –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
 *       - in: query
 *         name: authorId
 *         schema: { type: 'string' }
 *         description: –§–∏–ª—å—Ç—Ä –ø–æ ID –∞–≤—Ç–æ—Ä–∞
 *       - in: query
 *         name: helperId
 *         schema: { type: 'string' }
 *         description: –§–∏–ª—å—Ç—Ä –ø–æ ID –ø–æ–º–æ—â–Ω–∏–∫–∞
 *       - in: query
 *         name: excludeAuthor
 *         schema: { type: 'string' }
 *         description: –§–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
 *       - in: query
 *         name: search
 *         schema: { type: 'string' }
 *         description: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞—è–≤–∫–∏
 *       - in: query
 *         name: sortBy
 *         schema: { type: 'string', enum: ['createdAt_desc', 'createdAt_asc', 'updatedAt_desc', 'updatedAt_asc'], default: 'createdAt_desc' }
 *         description: –ü–æ–ª–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 requests:
 *                   type: array
 *                   items: { $ref: '#/components/schemas/Request' }
 *                 totalPages: { type: 'integer' }
 *                 currentPage: { type: 'integer' }
 *                 totalRequests: { type: 'integer' }
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 *       401:
 *         description: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
router.get('/', [
    query('page').optional().isInt({ min: 1 }).toInt(),
    query('limit').optional().isInt({ min: 1, max: 100 }).toInt(),
    query('subjects').optional().trim().escape(),
    query('grade').optional().isInt({ min: 1, max: 11 }).toInt(),
    query('status').optional().custom(value => {
        const allowedStatuses = ['draft', 'open', 'in_progress', 'pending', 'assigned', 'completed', 'closed', 'cancelled'];
        const receivedStatuses = value.split(',');
        return receivedStatuses.every(s => allowedStatuses.includes(s.trim()));
    }).withMessage('–£–∫–∞–∑–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å.'),
    query('authorId').optional().isMongoId(),
    query('helperId').optional().isMongoId(),
    query('excludeAuthor').optional().isMongoId(),
    query('search').optional().trim().escape(),
    query('sortBy').optional().isIn(['createdAt_desc', 'createdAt_asc', 'updatedAt_desc', 'updatedAt_asc'])
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const { page = 1, limit = 10, subjects, grade, status, authorId, helperId, search, sortBy = 'createdAt_desc', excludeAuthor } = req.query;

        const filters = {};
        
        if (subjects) {
            const subjectsArray = subjects.split(',').map(s => s.trim());
            filters.subject = { $in: subjectsArray };
        }
        
        if (grade) filters.grade = grade;
        
        if (status) {
            const statusArray = status.split(',').map(s => s.trim());
            filters.status = { $in: statusArray };
        } else if (!authorId && !helperId) {
            filters.status = { $ne: 'draft' };
        }

        if (authorId) {
            filters.author = authorId;
        } else if (excludeAuthor) {
            filters.author = { $ne: excludeAuthor };
        }

        if (helperId) filters.helper = helperId;

        if (search) {
            filters.$or = [
                { title: { $regex: search, $options: 'i' } },
                { description: { $regex: search, $options: 'i' } }
            ];
        }

        const sortParams = {};
        if (sortBy) {
            const [field, order] = sortBy.split('_');
            sortParams[field] = order === 'asc' ? 1 : -1;
        }

        const requests = await Request.find(filters)
            .populate('author', 'username _id rating avatar')
            .populate('helper', 'username _id rating avatar')
            .sort(sortParams)
            .skip((page - 1) * limit)
            .limit(limit)
            .lean();

        const totalRequests = await Request.countDocuments(filters);

        res.json({
            requests,
            totalPages: Math.ceil(totalRequests / limit),
            currentPage: page,
            totalRequests
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', err.message);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @swagger
 * /api/requests:
 *   post:
 *     summary: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–º–æ—â—å
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required: [title, description, subject, grade]
 *             properties:
 *               title: { type: 'string', minLength: 5, maxLength: 100 }
 *               description: { type: 'string', minLength: 10 }
 *               subject: { type: 'string' }
 *               grade: { type: 'integer', minimum: 1, maximum: 11 }
 *               topic: { type: 'string', nullable: true }
 *     responses:
 *       201:
 *         description: –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 *       401:
 *         description: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 */
router.post('/', uploadAttachments, createRequestLimiter, [
    body('title').trim().isLength({ min: 5, max: 100 }).withMessage('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('description').optional().trim(),
    body('subject').optional().trim().escape(),
    body('grade').optional().isInt({ min: 1, max: 11 }),
    body('topic').optional().trim().escape(),
    body('isDraft').optional().isBoolean(),
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const { title, description, subject, grade, topic } = req.body;
        const isDraft = req.body.isDraft === 'true';
        const author = req.user.id;
        
        // --->>> –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø GEMINI (–¢–û–õ–¨–ö–û –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò) <<<---
        let finalTitle = title;
        let finalDescription = description;

        if (!isDraft) {
            // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (!description || description.trim().length < 10) {
                return res.status(400).json({ errors: [{ msg: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤' }] });
            }
            if (!subject || subject.trim().length === 0) {
                return res.status(400).json({ errors: [{ msg: '–ü—Ä–µ–¥–º–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }] });
            }
            if (!grade) {
                return res.status(400).json({ errors: [{ msg: '–ö–ª–∞—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }] });
            }

            const user = await User.findById(author);
            if (!user.telegramId) {
                return res.status(403).json({ 
                    message: '–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
                    code: 'TELEGRAM_REQUIRED'
                });
            }

            // –ê —Ç–µ–ø–µ—Ä—å –º–æ–¥–µ—Ä–∞—Ü–∏—è
            const moderatedContent = await geminiService.moderateRequest(title, description);

            if (!moderatedContent.is_safe) {
                return res.status(400).json({
                    errors: [{
                        msg: `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: ${moderatedContent.rejection_reason}`,
                        param: "description",
                    }],
                });
            }
            finalTitle = moderatedContent.suggested_title;
            finalDescription = moderatedContent.suggested_description;
        }
        // --->>> –ö–û–ù–ï–¶ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò <<<---

        const request = new Request({
            title: finalTitle,
            description: finalDescription,
            subject,
            grade,
            topic,
            author,
            status: isDraft ? 'draft' : 'open'
        });

        await request.save();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
        if (req.files && req.files.length > 0) {
            const attachments = req.files.map(file => ({
                filename: file.filename,
                path: `/uploads/attachments/${file.filename}`,
                mimetype: file.mimetype,
                size: file.size,
                // FIX: –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
                originalName: Buffer.from(file.originalname, 'latin1').toString('utf8')
            }));
            request.attachments = attachments;
            await request.save();
        }
        
        const populatedRequest = await Request.findById(request._id)
            .populate('author', 'username rating avatar');

        if (populatedRequest.status !== 'draft') {
            io.emit('new_request', populatedRequest);
            // --->>> –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ <<<---
            await notifyHelpersAboutNewRequest(populatedRequest, req.user);
        }

        res.status(201).json(populatedRequest);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err.message);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @swagger
 * /api/requests/{id}/edit:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string', format: 'mongoId' }
 *         description: ID –∑–∞—è–≤–∫–∏
 *     responses:
 *       200:
 *         description: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 *       403:
 *         description: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 *       404:
 *         description: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
router.get('/:id/edit', protect, checkEditDeletePermission, async (req, res) => {
  // checkEditDeletePermission —É–∂–µ –Ω–∞—à–µ–ª –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª –ø—Ä–∞–≤–∞.
  // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ.
  res.json(req.request);
});

/**
 * @swagger
 * /api/requests/{id}:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ (–ø—É–±–ª–∏—á–Ω—ã–π)
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string', format: 'mongoId' }
 *         description: ID –∑–∞—è–≤–∫–∏
 *     responses:
 *       200:
 *         description: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
 *         content:
 *           application/json:
 *             schema: { $ref: '#/components/schemas/Request' }
 *       401:
 *         description: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 *       404:
 *         description: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 */
router.get('/:id', [
    param('id').isMongoId().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    
    try {
        const request = await Request.findById(req.params.id)
            .populate('author', 'username _id rating avatar roles.moderator roles.admin')
            .populate('helper', 'username _id rating avatar roles.moderator roles.admin');
        

        if (!request) {
            return res.status(404).json({ msg: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –Ø–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ editReason, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const responseData = { ...request.toObject() };
        if (request.editedByAdminInfo && request.editedByAdminInfo.reason) {
            responseData.editReason = request.editedByAdminInfo.reason;
        }

        const jsonResponse = JSON.stringify(responseData);
        res.setHeader('Content-Type', 'application/json');
        res.send(jsonResponse);

    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @swagger
 * /api/requests/{id}/assign/{helperId}:
 *   post:
 *     summary: –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string' }
 *         description: ID –∑–∞—è–≤–∫–∏
 *       - in: path
 *         name: helperId
 *         required: true
 *         schema: { type: 'string' }
 *         description: ID –ø–æ–º–æ—â–Ω–∏–∫–∞
 *     responses:
 *       200: { description: '–ü–æ–º–æ—â–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω' }
 *       400: { description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω' }
 *       403: { description: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∞–¥–º–∏–Ω)' }
 *       404: { description: '–ó–∞—è–≤–∫–∞ –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' }
 */
router.post('/:id/assign/:helperId', protect, isModOrAdmin, [
    param('id').isMongoId().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏'),
    param('helperId').isMongoId().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–º–æ—â–Ω–∏–∫–∞')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const request = await Request.findById(req.params.id).populate('author', '_id username');
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        if (request.status !== 'open') {
            return res.status(400).json({ msg: '–ú–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –∑–∞—è–≤–∫—É' });
        }

        const helper = await User.findById(req.params.helperId);
        if (!helper || !helper.roles || !helper.roles.helper) {
            return res.status(404).json({ msg: '–ü–æ–º–æ—â–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º' });
        }

        if (request.author._id.toString() === helper._id.toString()) {
            return res.status(400).json({ msg: '–ê–≤—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ —Å–≤–æ—é –∂–µ –∑–∞—è–≤–∫—É' });
        }

        request.helper = helper._id;
        request.status = 'assigned';
        await request.save();

        const populatedRequest = await Request.findById(request._id)
            .populate('author', 'username _id rating avatar')
            .populate('helper', 'username _id rating avatar');

        io.emit('request_updated', populatedRequest);

        await createAndSendNotification({
            user: helper._id,
            type: 'request_assigned_to_you',
            title: `–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –Ω–∞ –∑–∞—è–≤–∫—É!`,
            message: `–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ –∑–∞—è–≤–∫—É \"${request.title}\".`,
            link: `/request/${request._id}`,
            relatedEntity: { requestId: request._id }
        });
        
        if (request.author && request.author._id.toString() !== helper._id.toString()) {
            await createAndSendNotification({
                user: request.author._id,
                type: 'request_taken_by_helper', 
                title: `–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫!`,
                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${helper.username} –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É \"${request.title}\".`,
                link: `/request/${request._id}`,
                relatedEntity: { requestId: request._id, userId: helper._id }
            });
        }
        res.json(populatedRequest);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞:', err.message);
        if (err.kind === 'ObjectId') {
            return res.status(400).json({ msg: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' });
        }
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});


/**
 * @swagger
 * /api/requests/{id}/take:
 *   post:
 *     summary: –í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É (–¥–ª—è –ø–æ–º–æ—â–Ω–∏–∫–æ–≤)
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string' }
 *     responses:
 *       200: { description: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞' }
 *       400: { description: '–ó–∞—è–≤–∫—É –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å' }
 *       403: { description: '–¢–æ–ª—å–∫–æ –ø–æ–º–æ—â–Ω–∏–∫–∏ –º–æ–≥—É—Ç –±—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏' }
 *       404: { description: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }
 */
router.post('/:id/take', protect, isHelper, [ // isHelper middleware –ø—Ä–æ–≤–µ—Ä—è–µ—Ç req.user.roles.helper
    param('id').isMongoId().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const request = await Request.findById(req.params.id).populate('author', '_id username');
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        if (request.author._id.toString() === req.user.id) {
            return res.status(400).json({ msg: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É' });
        }

        if (request.status !== 'open') {
            return res.status(400).json({ msg: '–≠—Ç—É –∑–∞—è–≤–∫—É —É–∂–µ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –æ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞' });
        }

        request.helper = req.user.id;
        request.status = 'assigned';
        await request.save();
        
        const populatedRequest = await Request.findById(request._id)
            .populate('author', 'username _id')
            .populate('helper', 'username _id');

        io.emit('request_updated', populatedRequest);

        if (request.author) {
             await createAndSendNotification({
                user: request.author._id,
                type: 'request_taken_by_helper',
                title: `–í–∞—à—É –∑–∞—è–≤–∫—É –≤–∑—è–ª–∏!`,
                message: `–ü–æ–º–æ—â–Ω–∏–∫ ${req.user.username} –≤–∑—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É \"${request.title}\".`,
                link: `/request/${request._id}`,
                relatedEntity: { requestId: request._id, userId: req.user.id }
            });
        }
        res.json(populatedRequest);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏:', err.message);
         if (err.kind === 'ObjectId') {
            return res.status(400).json({ msg: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏' });
        }
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @swagger
 * /api/requests/{id}/complete:
 *   post:
 *     summary: –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string' }
 *     responses:
 *       200: { description: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è' }
 *       400: { description: '–ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞ (–Ω–µ —Ç–æ—Ç —Å—Ç–∞—Ç—É—Å)' }
 *       403: { description: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å' }
 *       404: { description: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }
 */
router.post('/:id/complete', protect, [
    param('id').isMongoId().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const request = await Request.findById(req.params.id)
            .populate('author', '_id username')
            .populate('helper', '_id username');
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const currentUserId = req.user.id;
        const isAuthor = request.author && request.author._id.toString() === currentUserId;
        const isHelper = request.helper && request.helper._id.toString() === currentUserId;

        if (!isAuthor && !isHelper) {
            return res.status(403).json({ msg: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É' });
        }

        if (request.status !== 'assigned') {
            return res.status(400).json({ msg: '–ó–∞—è–≤–∫—É –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "assigned"' });
        }

        request.status = 'completed';
        // request.completedAt = Date.now(); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await request.save();

        const populatedRequest = await Request.findById(request._id)
            .populate('author', 'username _id rating avatar')
            .populate('helper', 'username _id rating avatar');

        io.emit('request_updated', populatedRequest);

        const notificationTitle = `–ó–∞—è–≤–∫–∞ \"${request.title}\" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`;
        const notificationLink = `/request/${request._id}`;
        const commonRelatedEntity = { requestId: request._id };

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É (–µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª —Ö–µ–ª–ø–µ—Ä –∏ –∞–≤—Ç–æ—Ä –Ω–µ –æ–Ω —Å–∞–º)
        if (isHelper && request.author && request.author._id.toString() !== currentUserId) {
            await createAndSendNotification({
                user: request.author._id,
                type: 'request_marked_completed',
                title: notificationTitle,
                message: `–ü–æ–º–æ—â–Ω–∏–∫ ${req.user.username} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.`,
                link: notificationLink,
                relatedEntity: commonRelatedEntity
            });
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ö–µ–ª–ø–µ—Ä—É (–µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª –∞–≤—Ç–æ—Ä –∏ —Ö–µ–ª–ø–µ—Ä –Ω–µ –æ–Ω —Å–∞–º)
        if (isAuthor && request.helper && request.helper._id.toString() !== currentUserId) {
             await createAndSendNotification({
                user: request.helper._id,
                type: 'request_marked_completed',
                title: notificationTitle,
                message: `–ê–≤—Ç–æ—Ä ${req.user.username} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.`,
                link: notificationLink,
                relatedEntity: commonRelatedEntity
            });
        }
        

        // --- –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –•–ï–õ–ü–ï–†–£ –û –ó–ê–ö–†–´–¢–ò–ò –ó–ê–Ø–í–ö–ò ---
        if (request.helper) {
            await createAndSendNotification({
                user: request.helper,
                type: 'request_completed',
                title: `–ó–∞—è–≤–∫–∞ "${request.title}\" –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞`,
                message: '–ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ—Ç–∏–ª –µ–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.',
                link: `/request/${request._id}`
            });
        }

        res.json(request);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err.message);
        if (err.kind === 'ObjectId') {
            return res.status(400).json({ msg: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏' });
        }
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @swagger
 * /api/requests/{id}/cancel:
 *   post:
 *     summary: –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string' }
 *     responses:
 *       200: { description: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞' }
 *       400: { description: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å (–Ω–µ —Ç–æ—Ç —Å—Ç–∞—Ç—É—Å)' }
 *       403: { description: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å' }
 *       404: { description: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }
 */
router.post('/:id/cancel', protect, [
    param('id').isMongoId().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    try {
        const request = await Request.findById(req.params.id).populate('author helper', '_id username');
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const currentUserId = req.user.id;
        const isAuthor = request.author && request.author._id.toString() === currentUserId;

        if (!isAuthor) { // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä
            return res.status(403).json({ msg: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É' });
        }

        if (request.status === 'completed' || request.status === 'cancelled') {
            return res.status(400).json({ msg: `–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ \"${request.status}\"` });
        }
        
        const oldStatus = request.status;
        request.status = 'cancelled';
        // request.cancelledAt = Date.now(); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        // request.cancelledBy = currentUserId; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        await request.save();

        const populatedRequest = await Request.findById(request._id)
            .populate('author', 'username _id rating avatar')
            .populate('helper', 'username _id rating avatar');
            
        io.emit('request_updated', populatedRequest);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ö–µ–ª–ø–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –∏ –æ—Ç–º–µ–Ω–∏–ª –∞–≤—Ç–æ—Ä
        if (oldStatus === 'assigned' && request.helper && isAuthor) {
             await createAndSendNotification({
                user: request.helper._id,
                type: 'request_status_changed', // –∏–ª–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø 'request_cancelled_by_author'
                title: `–ó–∞—è–≤–∫–∞ \"${request.title}\" –æ—Ç–º–µ–Ω–µ–Ω–∞`,
                message: `–ê–≤—Ç–æ—Ä ${req.user.username} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.`,
                link: `/request/${request._id}`,
                relatedEntity: { requestId: request._id }
            });
        }

        res.json(request);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏:', err.message);
         if (err.kind === 'ObjectId') {
            return res.status(400).json({ msg: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏' });
        }
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @swagger
 * /api/requests/{id}:
 *   put:
 *     summary: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
   *         description: ID –∑–∞—è–≤–∫–∏
 *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             allOf:
   *               - $ref: '#/components/schemas/Request'
   *               - type: object
   *                 properties:
   *                   editReason:
   *                     type: string
   *                     description: –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
   *     responses:
   *       200:
   *         description: –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
   *       403:
   *         description: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  router.put('/:id', protect, checkEditDeletePermission, uploadAttachments, [
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    body('title').optional().trim().isLength({ min: 5, max: 100 }),
    body('description').optional().trim().isLength({ min: 10 }),
    body('subject').optional().trim().notEmpty().escape(),
    body('grade').optional().isInt({ min: 1, max: 11 }),
    body('editReason').optional().trim().escape(),
    body('deletedAttachments').optional().isString() // –ë—ã–ª–æ isArray(), –º–µ–Ω—è–µ–º –Ω–∞ isString()
  ], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        let { title, description, subject, grade, urgency, editReason, deletedAttachments } = req.body;
        let request = req.request; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ middleware

        // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (deletedAttachments) {
            try {
                const attachmentsToDelete = JSON.parse(deletedAttachments);
                if (Array.isArray(attachmentsToDelete)) {
                     // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
                    request.attachments.forEach(att => {
                        if (attachmentsToDelete.includes(att.filename)) {
                            const filePath = path.join(process.cwd(), 'uploads/attachments', att.filename);
                            if (fs.existsSync(filePath)) {
                                fs.unlinkSync(filePath);
                            }
                        }
                    });

                    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –±–∞–∑–µ
                    request.attachments = request.attachments.filter(
                        att => !attachmentsToDelete.includes(att.filename)
                    );
                }
            } catch(e) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:", e);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            }
        }

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
        if (req.files && req.files.length > 0) {
            const newAttachments = req.files.map(file => ({
                filename: file.filename,
                path: `/uploads/attachments/${file.filename}`,
                mimetype: file.mimetype,
                size: file.size,
                // FIX: –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
                originalName: Buffer.from(file.originalname, 'latin1').toString('utf8')
            }));
            request.attachments.push(...newAttachments);
        }

        // --->>> –í–û–ó–í–†–ê–©–ê–ï–ú –ú–û–î–ï–†–ê–¶–ò–Æ –ü–†–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ò <<<---
        if (title || description) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–¥ —á—É–∂–æ–π –∑–∞—è–≤–∫–æ–π, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
            // –≠—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –∏ –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤, –∏ –º–æ–¥–µ—Ä–æ–≤, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏—Ö –°–í–û–ò –∑–∞—è–≤–∫–∏.
            if (!req.isModeratorAction) {
                const newTitle = title || request.title;
                const newDescription = description || request.description;
                const moderatedContent = await geminiService.moderateRequest(newTitle, newDescription);

                if (!moderatedContent.is_safe) {
                    return res.status(400).json({
                        errors: [{
                            msg: `–í–∞—à —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é: ${moderatedContent.rejection_reason}`,
                            param: description ? "description" : "title",
                        }],
                    });
                }
                // –ï—Å–ª–∏ –≤—Å–µ –æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
                request.title = moderatedContent.suggested_title;
                request.description = moderatedContent.suggested_description;
            } else {
                // –ê –µ—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ—Ä/–∞–¥–º–∏–Ω, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
                if (title) request.title = title;
                if (description) request.description = description;
            }
        }
        // --->>> –ö–û–ù–ï–¶ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò <<<---

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (subject) request.subject = subject;
        if (grade) request.grade = grade;
        if (urgency) request.urgency = urgency;

        // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
        if (req.isModeratorAction && editReason) {
            request.editedByAdminInfo = {
                editorId: req.user.id,
                reason: editReason,
                editedAt: new Date()
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
            if (request.author.toString() !== req.user.id) {
                await createAndSendNotification({
                    user: request.author,
                    type: 'request_edited_by_admin',
                    title: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞',
                    message: `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${req.user.username} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—à—É –∑–∞—è–≤–∫—É \"${request.title}\". –ü—Ä–∏—á–∏–Ω–∞: \"${editReason}\"`,
                    link: `/request/${request._id}`,
                    relatedEntity: { requestId: request._id, editorId: req.user.id }
                });
            }
        }
        
        const updatedRequest = await request.save();
        res.json(updatedRequest);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  });

  /**
   * @swagger
   * /api/requests/{id}/status:
   *   put:
   *     summary: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–∏—Ç—å)
   *     tags: [Requests]
   *     security:
   *       - bearerAuth: []
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema: { type: 'string', description: 'ID –∑–∞—è–≤–∫–∏' }
   *     requestBody:
   *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
   *             required: [status]
 *             properties:
   *               status:
   *                 type: string
   *                 enum: [open, assigned, in_progress, completed, cancelled, on_hold]
   *                 description: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
 *     responses:
   *       200:
   *         description: –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
   *       400:
   *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   *       403:
   *         description: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
   *       404:
   *         description: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   */
  router.put('/:id/status', protect, [
    param('id').isMongoId().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏'),
    body('status').isIn(['completed', 'cancelled', 'closed', 'in_progress', 'open'])
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
          const { id } = req.params;
          const { status: newStatus } = req.body;
          const userId = req.user.id;
  
          const request = await Request.findById(id);
  
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

          const oldStatus = request.status;
          const isAuthor = request.author.toString() === userId;
  
          // --- –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ---
          if (newStatus === 'open' && oldStatus === 'draft') {
              if (!isAuthor) {
                  return res.status(403).json({ msg: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫.' });
              }

              // --->>> –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ú–û–î–ï–†–ê–¶–ò–Ø –ü–ï–†–ï–î –ü–£–ë–õ–ò–ö–ê–¶–ò–ï–ô –ß–ï–†–ù–û–í–ò–ö–ê <<<---
              const moderatedContent = await geminiService.moderateRequest(request.title, request.description);

              if (!moderatedContent.is_safe) {
                  // –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ù–ï –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                  return res.status(400).json({
                      errors: [{
                          msg: `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: ${moderatedContent.rejection_reason}`,
                          param: "description", // –£—Å–ª–æ–≤–Ω–æ
                      }],
                      code: 'MODERATION_FAILED'
                  });
              }
              // –ï—Å–ª–∏ –≤—Å–µ –æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
              request.title = moderatedContent.suggested_title;
              request.description = moderatedContent.suggested_description;
              // --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò <<<---

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
              if (!request.description || !request.subject || !request.grade) {
                  return res.status(400).json({ msg: '–ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–µ–¥–º–µ—Ç –∏ –∫–ª–∞—Å—Å.' });
              }
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É Telegram
              const user = await User.findById(userId);
              if (!user.telegramId) {
                  return res.status(403).json({
                      message: '–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
                      code: 'TELEGRAM_REQUIRED'
                  });
              }
          } else if (newStatus === 'completed') {
              if (!isAuthor) {
                  return res.status(403).json({ msg: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É.' });
              }
          } else {
              // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
          }
  
          // --- –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
          request.status = newStatus;
          if (newStatus === 'completed') {
              request.completedAt = new Date();
          }
        await request.save();

          const populatedRequest = await Request.findById(id)
              .populate('author', 'username _id rating avatar')
              .populate('helper', 'username _id rating avatar');
  
          // --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –°–û–ö–ï–¢–´ ---
          if (oldStatus === 'draft' && newStatus === 'open') {
              io.emit('new_request', populatedRequest);
              
              // --->>> –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ <<<---
              await notifyHelpersAboutNewRequest(populatedRequest, req.user);

          } else {
              io.emit('request_updated', populatedRequest);
          }
  
          if (newStatus === 'completed' && request.helper) {
              await createAndSendNotification({
                  user: request.helper,
                  type: 'request_completed',
                  title: `–ó–∞—è–≤–∫–∞ "${request.title}" –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞`,
                  message: '–ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ—Ç–∏–ª –µ–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.',
                  link: `/request/${request._id}`
              });
          }
  
          res.json(populatedRequest);
  
      } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', err.message);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

/**
 * @route   DELETE api/requests/:id
 * @desc    –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É)
 * @access  Private
 */
router.delete('/:id', protect, checkEditDeletePermission, [
    body('confirmationCode').optional().isString().isLength({ min: 6, max: 6 }),
    body('deleteReason').optional().isString().trim()
], async (req, res) => {
  try {
    const { confirmationCode, deleteReason } = req.body;
    const actingUser = req.user;
    const request = req.request; // –∏–∑ checkEditDeletePermission

    // --- –õ–û–ì–ò–ö–ê 2FA –î–õ–Ø –ú–û–î–ï–†–ê–¢–û–†–û–í ---
    if (req.isModeratorAction) {
      // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ—Ä, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω, —Ç—Ä–µ–±—É–µ–º 2FA
      if (actingUser.role !== 'admin') {
        if (!actingUser.telegramId) {
          return res.status(403).json({ msg: '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram.' });
        }

        const redisKey = `mod-action:delete-request:${actingUser.id}:${request._id}`;

        if (!confirmationCode) {
          // –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
          const code = crypto.randomInt(100000, 999999).toString();
          await redis.set(redisKey, code, 'EX', 300); // 5 –º–∏–Ω—É—Ç

          const message = `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ "**${request.title}**" –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:\n\n` +
                          `\`${code}\`\n\n` +
                          `–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è (—É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏): ${deleteReason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}.`;
          await sendTelegramMessage(actingUser.telegramId, message);

          return res.status(400).json({ 
              confirmationRequired: true,
              message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ Telegram.' 
          });
        } else {
          // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
          const storedCode = await redis.get(redisKey);
          if (storedCode !== confirmationCode) {
            return res.status(400).json({ msg: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.' });
          }
          await redis.del(redisKey); // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        }
      }
      // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏–ª–∏ –º–æ–¥–µ—Ä —Å –≤–µ—Ä–Ω—ã–º –∫–æ–¥–æ–º, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
      await createAndSendNotification({
          user: request.author,
          type: 'request_deleted_by_admin',
          title: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞',
          message: `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${actingUser.username} —É–¥–∞–ª–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É \"${request.title}\". –ü—Ä–∏—á–∏–Ω–∞: \"${deleteReason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}.\"`,
          link: `/request/${request._id}`,
          relatedEntity: { requestId: request._id }
      });
    }

    // --- –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –î–õ–Ø –í–°–ï–• (–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∞, –∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏) ---
    
    await Request.findByIdAndDelete(request._id);
    await Message.deleteMany({ request: request._id });
    
    // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    io.emit('request_deleted', { id: request._id });
    
    res.json({ msg: '–ó–∞–ø—Ä–æ—Å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });

  } catch (err) {
    console.error(err.message);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

/**
 * @swagger
 * /api/requests/{id}/reopen:
 *   post:
 *     summary: –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –ø–æ–º–æ—â—å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–∞
 *     tags: [Requests]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema: { type: 'string', description: 'ID –∑–∞—è–≤–∫–∏' }
 *     responses:
 *       200: { description: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞' }
 *       403: { description: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ' }
 *       404: { description: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }
 *       400: { description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' }
 */
router.post('/:id/reopen', protect, [
    param('id').isMongoId().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const request = await Request.findById(req.params.id).populate('helper', '_id username');
        if (!request) {
            return res.status(404).json({ msg: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        if (request.author.toString() !== req.user.id) {
            return res.status(403).json({ msg: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É.' });
        }

        if (!['assigned', 'in_progress'].includes(request.status)) {
            return res.status(400).json({ msg: '–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ.' });
        }
        
        const formerHelper = request.helper;

        // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Å–µ—Å—Å–∏–µ–π –ø–æ–º–æ—â–∏
        // –í–∞–∂–Ω–æ: –º—ã –Ω–µ —É–¥–∞–ª—è–µ–º –∏—Ö, –∞ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Ç–æ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥–º–∏–Ω–æ–º)
        const updateResult = await Message.updateMany(
            { requestId: request._id }, 
            { $set: { isArchived: true } }
        );

        // console.log(`[ARCHIVE] Request ID: ${request._id}. Messages update result:`, updateResult);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–µ–ª–ø–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 'open'
        request.helper = null;
        request.status = 'open';
        request.updatedAt = Date.now();
        await request.save();

        const populatedRequest = await Request.findById(request._id)
            .populate('author', 'username _id rating avatar')
            .populate('helper', 'username _id rating avatar');

        io.emit('request_updated', populatedRequest);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–≤—à–µ–º—É —Ö–µ–ª–ø–µ—Ä—É
        if (formerHelper) {
           await createAndSendNotification({
                user: formerHelper._id,
                type: 'request_reopened_by_author',
                title: '–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É',
                message: `–ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ "${request.title}\" –Ω–µ –ø–æ–ª—É—á–∏–ª —Ä–µ—à–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω—É–ª –µ–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫. –¢–µ–∫—É—â–∏–π —á–∞—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.`,
                link: `/request/${request._id}`,
                relatedEntity: { requestId: request._id }
            });
        }
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await createAndSendNotification({
            user: request.author,
            type: 'request_reopened_by_you',
            title: '–í—ã –≤–µ—Ä–Ω—É–ª–∏ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É',
            message: `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ "${request.title}\" —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –≤–∏–¥–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–º–æ—â–Ω–∏–∫–∞–º. –°—Ç–∞—Ä—ã–π —á–∞—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.`,
            link: `/request/${request._id}`,
            relatedEntity: { requestId: request._id }
        });

        res.json({ msg: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤.' });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏:', err.message);
         if (err.kind === 'ObjectId') {
            return res.status(400).json({ msg: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏' });
        }
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

  return router; // –í–û–ó–í–†–ê–©–ê–ï–ú –°–ö–û–ù–§–ò–ì–£–†–ò–†–û–í–ê–ù–ù–´–ô –†–û–£–¢–ï–† –í –ö–û–ù–¶–ï
};