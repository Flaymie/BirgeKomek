import express from 'express';
import { param, validationResult } from 'express-validator';
import Notification from '../models/Notification.js';
import { protect } from '../middleware/auth.js';
import User from '../models/User.js';
import jwt from 'jsonwebtoken';
import axios from 'axios';
import { generalLimiter } from '../middleware/rateLimiters.js';

const router = express.Router();

export const createAndSendNotification = async (sseConnections, notificationData) => {
  try {
    const { user, type, title, message, link, relatedEntity } = notificationData;
    
    const userToSend = await User.findById(user);
    if (!userToSend) {
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user}`);
      return;
    }

    const notification = new Notification({
      user,
      userTelegramId: userToSend.telegramId,
      type,
      title,
      message,
      link,
      relatedEntity,
    });
    
    await notification.save();
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user}: ${title}`);
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å userTelegramId: ${userToSend.telegramId}`);
    
    // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SSE –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    const client = sseConnections[user.toString()];
    if (client) {
        client.write(`event: new_notification\n`);
        client.write(`data: ${JSON.stringify(notification)}\n\n`);
    }

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
    if (userToSend.telegramId && userToSend.telegramNotificationsEnabled) {
        const botToken = process.env.BOT_TOKEN;
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        
        let tgMessage = `*${title.replace(/([_*\[\]()~`>#+-=|{}.!])/g, '\\$1')}*\n\n`;
        if (message) {
            // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
            const cleanMessage = message.replace(/<\/?[^>]+(>|$)/g, "");
            tgMessage += `${cleanMessage.replace(/([_*\[\]()~`>#+-=|{}.!])/g, '\\$1')}\n\n`;
        }
        
        const inlineKeyboard = {
            inline_keyboard: [[]]
        };
        
        if (link) {
             inlineKeyboard.inline_keyboard[0].push({ text: 'üîó –ü–µ—Ä–µ–π—Ç–∏', url: `${frontendUrl}${link}` });
        }

        const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

        try {
            await axios.post(apiUrl, {
                chat_id: userToSend.telegramId,
                text: tgMessage,
                parse_mode: 'MarkdownV2',
                reply_markup: inlineKeyboard
            });
            console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userToSend.username}`);
        } catch (tgError) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è ${userToSend.username}:`, tgError.response ? tgError.response.data : tgError.message);
        }
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
};


// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä
export default ({ sseConnections }) => {

router.get('/', protect, generalLimiter, async (req, res) => {
  try {
    const userId = req.user.id;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

            const query = { user: userId };

            if (req.query.isRead === 'true') {
            query.isRead = true;
            } else if (req.query.isRead === 'false') {
            query.isRead = false;
            }

            const notifications = await Notification.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .lean();

            const total = await Notification.countDocuments(query);

            const unreadCount = req.query.isRead === undefined 
            ? await Notification.countDocuments({ user: userId, isRead: false })
            : (query.isRead === false ? total : await Notification.countDocuments({ user: userId, isRead: false }));

    res.json({
      notifications,
      totalPages: Math.ceil(total / limit),
            currentPage: page,
      total,
            unreadCount,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ msg: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.get('/unread', protect, generalLimiter, async (req, res) => {
  try {
    const notifications = await Notification.find({ user: req.user._id, isRead: false })
      .sort({ createdAt: -1 });
    res.json({ notifications });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ msg: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/read-all', protect, generalLimiter, async (req, res) => {
  try {
    await Notification.updateMany(
      { user: req.user._id, isRead: false },
      { $set: { isRead: true } }
    );
    res.json({ msg: '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ msg: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/read', protect, generalLimiter, [
  param('id').isMongoId().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const notification = await Notification.findOneAndUpdate(
      { _id: req.params.id, user: req.user._id },
      { isRead: true },
      { new: true }
    );

    if (!notification) {
      return res.status(404).json({ msg: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
    }

    res.json(notification);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
    res.status(500).json({ msg: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.delete('/:id', protect, generalLimiter, [
  param('id').isMongoId().withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const notification = await Notification.findOneAndDelete({
            _id: req.params.id,
            user: req.user._id
        });

        if (!notification) {
            return res.status(404).json({ msg: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        res.json({ msg: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        res.status(500).json({ msg: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

    router.get('/subscribe', (req, res) => {
        try {
            const token = req.query.token;
            if (!token) {
                return res.status(401).json({ msg: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" });
            }

            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const userId = decoded.id;

  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
            res.flushHeaders();

            sseConnections[userId] = res;
            console.log(`[SSE] User connected: ${userId}`);

            res.write('event: connection\n');
            res.write('data: SSE connection established\n\n');

  req.on('close', () => {
                delete sseConnections[userId];
                console.log(`[SSE] User disconnected: ${userId}`);
  });

        } catch (err) {
            console.error('[SSE] Auth Error:', err.message);
            return res.status(401).json({ msg: "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" });
        }
    });

    return router;
};