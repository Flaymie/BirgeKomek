import express from 'express';
import axios from 'axios';
import Notification from '../models/Notification.js';
import User from '../models/User.js';
import mongoose from 'mongoose';

const router = express.Router();
const botToken = process.env.BOT_TOKEN;

// –†–æ—É—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram
router.post(`/webhook/${botToken}`, async (req, res) => {
    console.log('[Telegram Webhook] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(req.body, null, 2));

    const { callback_query } = req.body;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    if (callback_query) {
        const { data, message } = callback_query;
        const [action, notificationId] = data.split('_');

        if (action === 'mark' && data.startsWith('mark_read_')) {
            const realNotificationId = data.substring('mark_read_'.length);
            
            console.log('[DEBUG] Webhook –ø–æ–ª—É—á–∏–ª callback_query –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
                realNotificationId,
                callbackQueryId: callback_query.id,
                fromUser: callback_query.from
            });
            
            try {
                // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                console.log('[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å ID:', realNotificationId);
                const notificationExists = await Notification.findById(realNotificationId);
                console.log('[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', notificationExists ? '–°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                
                // 2. –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                console.log('[DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                const notification = await Notification.findByIdAndUpdate(
                    realNotificationId, 
                    { isRead: true },
                    { new: true }
                );

                if (notification) {
                    console.log('[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', notification._id);
                    // 2. –û—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ –∫–æ–ª–±—ç–∫ –ø–æ–ª—É—á–µ–Ω
                    await axios.post(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
                        callback_query_id: callback_query.id,
                        text: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.'
                    });

                    // 3. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É
                    await axios.post(`https://api.telegram.org/bot${botToken}/editMessageReplyMarkup`, {
                        chat_id: message.chat.id,
                        message_id: message.message_id,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: '‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'already_read' }
                            ]]
                        }
                    });
                     console.log(`[Telegram] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${realNotificationId} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.`);
                } else {
                     console.log(`[Telegram] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${realNotificationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
                     await axios.post(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
                        callback_query_id: callback_query.id,
                        text: '–û—à–∏–±–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.',
                        show_alert: true
                    });
                }
            } catch (error) {
                console.error('[Telegram Webhook] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:', error.response ? error.response.data : error.message);
            }
        }
    }

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 OK, —á—Ç–æ–±—ã Telegram –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫
    res.sendStatus(200);
});

// –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±–æ—Ç–∞ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
router.post('/mark-notification-read', async (req, res) => {
    const { notificationId, telegramId } = req.body;
    
    console.log('üõ†Ô∏è DEBUG: notificationId =', notificationId);
    console.log('üõ†Ô∏è DEBUG: telegramId =', telegramId);
    console.log('üõ†Ô∏è DEBUG: typeof telegramId =', typeof telegramId);
    
    if (!notificationId) {
        console.log('[DEBUG] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return res.status(400).json({ msg: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –≤–∞–ª–∏–¥–Ω—ã–º ObjectId –¥–ª—è MongoDB
        if (!mongoose.Types.ObjectId.isValid(notificationId)) {
            console.log('[DEBUG] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ObjectId:', notificationId);
            return res.status(400).json({ msg: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
        }
        
        // –°–ù–ê–ß–ê–õ–ê –ü–†–û–°–¢–û –ü–†–û–í–ï–†–ò–ú, –°–£–©–ï–°–¢–í–£–ï–¢ –õ–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í–û–û–ë–©–ï
        const notif = await Notification.findById(notificationId);
        if (!notif) {
            console.log('üîç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ ID:', notificationId);
            return res.status(404).json({ msg: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID –≤–æ–æ–±—â–µ' });
        }
        
        console.log('üîç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ê–ô–î–ï–ù–û:', JSON.stringify(notif, null, 2));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const updatedNotif = await Notification.findByIdAndUpdate(
            notificationId,
            { isRead: true },
            { new: true }
        );
        
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedNotif ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞');
        
        return res.status(200).json({ msg: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
        return res.status(500).json({ msg: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –†–æ—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ (—É–¥–æ–±–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
router.get('/set-webhook', async (req, res) => {
    const serverUrl = process.env.SERVER_URL; // –ù–∞–ø—Ä–∏–º–µ—Ä, https://your-domain.com
    if (!serverUrl) {
        return res.status(500).json({ msg: 'SERVER_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env' });
    }

    const webhookUrl = `${serverUrl}/api/bot/webhook/${botToken}`;

    try {
        const response = await axios.get(`https://api.telegram.org/bot${botToken}/setWebhook?url=${webhookUrl}`);
        console.log('–û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response.data);
        res.status(200).json({ msg: `–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${webhookUrl}`, details: response.data });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error.response ? error.response.data : error.message);
        res.status(500).json({ msg: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫', error: error.response ? error.response.data : error.message });
    }
});

export default router; 